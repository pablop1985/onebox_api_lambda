var onebox = {
	desarrollo: false,
	API: {},
	awsclient: {},
	DB: {},
	DynDB: {},
	token: "",
	https: {},
	http: {},
	carrito: "",
	prerreserva: "",
	obtenerDB: async function() {
		let promiseInfo = new Promise(async function(resolve, reject) {
			await onebox.awsclient.getSecretValue({
				SecretId: 'XXXXXX'
			}, async(err, data) => {
				if (err) {
					console.log(err);
					reject();
				} else {
					if ('SecretString' in data) {
						let secret = data.SecretString;
						resolve(secret);
					} else {
						let buff = new Buffer(data.SecretBinary, 'base64');
						let decodedBinarySecret = buff.toString('ascii');

						resolve(decodedBinarySecret);
					}
				}
			});
		});

		return JSON.parse(await promiseInfo);
	},
	obtenerAPI: async function() {
		let promiseInfo = new Promise(async function(resolve, reject) {
			await onebox.awsclient.getSecretValue({
				SecretId: 'onebox'
			}, async(err, data) => {
				if (err) {
					console.log(err);
					reject();
				} else {
					if ('SecretString' in data) {
						let secret = data.SecretString;
						resolve(secret);
					} else {
						let buff = new Buffer(data.SecretBinary, 'base64');
						let decodedBinarySecret = buff.toString('ascii');

						resolve(decodedBinarySecret);
					}
				}
			});
		});

		onebox.API = JSON.parse(await promiseInfo);

	},
	obtenerToken: async function() {
		let promesa = new Promise(async function(resolve, reject) {
			let params = {
				TableName: 'onebox_token',
				Key: {
					'apikey': 1
				}
			}

			await onebox.DynDB.get(params, async function(err, data) {
				if (err) {
					console.error("NO SE ENCUENTRA LA CLAVE:", JSON.stringify(err, null, 2));
					reject("ERROR: NO SE ENCUENTRA LA CLAVE");
				} else {
					if (data.Item !== undefined && data.Item.validez > (Date.now() / 1000).toFixed(0)) {
						console.log("TOKEN DESDE BD");
						onebox.token = data.Item.clave;
						resolve(onebox.token)
					} else {
						console.log("TOKEN DESDE API");
						let post = "grant_type=client_credentials&channel_id=" + onebox.API.ChannelID + "&client_id=seller-channel-client&client_secret=" + onebox.API["API-KEY"];

						let opciones = {
							method: 'POST',
							hostname: onebox.API.urlToken.hostname,
							port: onebox.API.urlToken.port,
							protocol: onebox.API.urlToken.protocol,
							path: onebox.API.urlToken.path,
							headers: {
								"Content-Type": "application/x-www-form-urlencoded",
								'Content-Length': Buffer.byteLength(post)
							}
						}

						console.log(post);

						let proto = {};

						if (onebox.API.urlToken.protocol == "https:") {
							proto = onebox.https;
						} else {
							proto = onebox.http;
						}

						let datos = proto.request(opciones, (res) => {
							let cuerpo = "";
							res.on('data', (trozo) => {
								cuerpo += trozo
							});
							res.on('end', () => {
								console.log(cuerpo);
								cuerpo = JSON.parse(cuerpo);
								if (cuerpo.access_token !== undefined) {
									let params = {
										TableName: 'onebox_token',
										Item: {
											"apikey": 1,
											"clave": cuerpo.access_token,
											"validez": (Date.now() / 1000 + 36000).toFixed(0),
										}
									}
									onebox.DynDB.put(params, function(err, data) {
										if (err) {
											reject("NO SE HA PODIDO GUARDAR LA KEY: " + err);
										} else {
											onebox.token = cuerpo.access_token;
											resolve(onebox.token);
										}
									});
								} else {
									reject("ERROR EN TOKEN:" + JSON.stringify(cuerpo));
								}
							});
						});

						datos.on('error', (err) => {
							reject("ERROR PETICION: " + err);
						})

						datos.write(post);
						datos.end();
					}
				}
			});
		});

		return await promesa;

	},
	llamadaAPI: async function(metodo, funcion, parametros) {
		console.log("Llamada API: " + metodo + " / " + funcion + " / " + JSON.stringify(parametros));
		let promesa = new Promise(async function(resolve, reject) {
			let params = JSON.stringify(parametros);

			let opciones = {
				method: metodo,
				hostname: onebox.desarrollo ? onebox.API.urlDesarrollo.hostname : onebox.API.urlAPI.hostname,
				port: onebox.desarrollo ? onebox.API.urlDesarrollo.port : onebox.API.urlAPI.port,
				protocol: onebox.desarrollo ? onebox.API.urlDesarrollo.protocol : onebox.API.urlAPI.protocol,
				path: onebox.desarrollo ? onebox.API.urlDesarrollo.path + funcion : onebox.API.urlAPI.path + funcion,
				headers: {
					"Content-Type": "application/x-www-form-urlencoded",
					'Content-Length': Buffer.byteLength(params),
					'Authorization': 'Bearer ' + onebox.token,
					'Accept': 'application/json'
				}
			}

			console.log("Funcion::{datos} => " + funcion + "::" + params);

			let proto = {};

			if (opciones.protocol == "https:") {
				proto = onebox.https;
			} else {
				proto = onebox.http;
			}


			let datos = await proto.request(opciones, (res) => {
				let cuerpo = "";
				res.on('data', (trozo) => {
					cuerpo += trozo
				});
				res.on('end', () => {
					try {
						console.log("RESPUESTA ONEBOX: " + cuerpo.toString());
						cuerpo = JSON.parse(cuerpo);
						if (cuerpo.error !== undefined) {
							reject("ERROR EN LLAMADA: " + JSON.stringify(cuerpo));
						} else {
							resolve(cuerpo);
						}
					} catch (err) {
						reject("ERROR GRAVE EN LLAMADA: " + err);
					}

				});
			});

			datos.on('error', (err) => {
				reject("ERROR PETICION: " + err);
			})

			datos.write(params);
			datos.end();
		});

		return await promesa;
	},
	generarEstado: async function(codigo, mensaje, datos, headers = {}) {
		let vuelta = {};
		vuelta.estado = codigo < 0 ? 500 : 200;
		vuelta.body = {
			mensaje: mensaje,
			datos: datos,
			codigo: codigo
		};
		if (headers !== {}) {
			vuelta.headers = headers;
		}
		return vuelta;
	},
	general: {
		//METODOS GENERALES
		buscarEventos: async function(filtros = {}) {
			console.log("Funcion buscar eventos");
			let parametros = {

			}
			if (filtros.tipo !== undefined) {
				parametros.eventType = filtros.tipo;
			}
			if (filtros.visitante !== undefined) {
				parametros.visitorType = filtros.visitante;
			}
			if (filtros.inicio !== undefined) {
				parametros.startDate = filtros.inicio;
			}
			if (filtros.fin !== undefined) {
				parametros.endDate = filtros.fin;
			}
			if (filtros.sesion !== undefined) {
				parametros.venueID = filtros.sesion;
			}
			if (filtros.clase !== undefined) {
				parametros.taxonomy = filtros.clase;
			}
			if (filtros.clasePropia !== undefined) {
				parametros.propTaxonomy = filtros.clasePropia;
			}
			if (filtros.tour !== undefined) {
				parametros.tourId = filtros.tour;
			}
			if (filtros.filtros !== undefined) {
				parametros.attrFilter = filtros.filtros;
			}

			let respuesta = await onebox.llamadaAPI('GET', 'events/search', parametros);
			if (respuesta["event-search-info"] !== undefined) {
				return await onebox.generarEstado(101, "Listado de eventos", respuesta["event-search-info"]);
			} else {
				return await onebox.generarEstado(-101, "No hay eventos", []);
			}
		}
	},
	producto: {
		//PRODUCTOS/SESIONES
		infoEvento: async function(idEvento, filtros) {
			console.log("Funcion info evento");
			let parametros = {}
			if (filtros.inicio !== undefined) {
				parametros.startDate = filtros.inicio
			}
			if (filtros.fin !== undefined) {
				parametros.endDate = filtros.fin
			}

			let respuesta = await onebox.llamadaAPI('GET', 'event/' + idEvento + "/info", parametros);
			if (respuesta["@id"] !== undefined) {
				return await onebox.generarEstado(102, "Informacion del evento", respuesta);
			} else {
				return await onebox.generarEstado(-102, "No hay evento", []);
			}
		},
		infoSesion: async function(idSesion) {
			console.log("Funcion info sesion");
			let parametros = {};

			let respuesta = await onebox.llamadaAPI('GET', 'session/' + idSesion + "/info", parametros);
			if (respuesta["@id"] !== undefined) {
				return await onebox.generarEstado(103, "Informacion de la sesion", respuesta);
			} else {
				return await onebox.generarEstado(-103, "No hay sesion", []);
			}
		},
		obligatoriosEvento: async function(idEvento, campo) {
			console.log("Funcion obligatorios evento");
			let parametros = {
				fieldGroup: campo
			};

			let respuesta = await onebox.llamadaAPI('GET', 'event/' + idEvento + "/eventField", parametros);
			if (respuesta["eventFieldId"] !== undefined) {
				return await onebox.generarEstado(104, "Datos obligatorios", respuesta);
			} else {
				return await onebox.generarEstado(-104, "No hay datos obligatorios", []);
			}
		},
		obtenerVistas: async function(idSesion) {
			console.log("Funcion obtener vistas sesion");
			let parametros = {};

			let respuesta = await onebox.llamadaAPI('GET', 'session/' + idSesion + "/seatMap/rootView", parametros);
			if (respuesta.view["@id"] !== undefined) {
				return await onebox.generarEstado(105, "Informacion de las vistas de la sesion", respuesta);
			} else {
				return await onebox.generarEstado(-105, "No hay vistas para la sesiÃ³n", []);
			}
		},
		detallesVista: async function(idSesion, vista) {
			console.log("Funcion detalles sesion");
			let parametros = {};

			let respuesta = await onebox.llamadaAPI('GET', 'session/' + idSesion + "/seatMap/view/" + vista, parametros);
			if (respuesta.view["@id"] !== undefined) {
				return await onebox.generarEstado(106, "Detalles de la vista de la sesion", respuesta);
			} else {
				return await onebox.generarEstado(-106, "No hay detalles de la vista", []);
			}
		},
		asientosVista: async function(idSesion, vista) {
			console.log("Funcion asientos vista");
			let parametros = {};

			let respuesta = await onebox.llamadaAPI('GET', 'session/' + idSesion + "/seatStatus/" + vista, parametros);
			if (respuesta.viewStatus["@id"] !== undefined) {
				return await onebox.generarEstado(107, "Informacion de asientos de la vista", respuesta);
			} else {
				return await onebox.generarEstado(-107, "No hay informacion de asientos", []);
			}
		},

	},
	cesta: {
		//CARRITO/DESCUENTOS/PROMOCIONES
		crearCarrito: async function() {
			console.log("Funcion crear carrito");
			let parametros = {};

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/create', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(201, "Informacion del carrito", respuesta);
			} else {
				return await onebox.generarEstado(-201, "No hay token", []);
			}
		},
		anadirNoNumerada: async function(sesion, tipo, unidades) {
			console.log("Funcion aÃ±adir asientos no numerados");
			let parametros = {
				token: onebox.carrito,
				idSession: sesion,
				numSeats: unidades,
				idActivityTicketType: tipo
			};

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addIndividualActivitySeats', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(202, "Informacion del carrito", respuesta);
			} else {
				return await onebox.generarEstado(-202, "No hay token", []);
			}
		},
		anadirNumerada: async function(asientos, filtros) {
			console.log("Funcion aÃ±adir asientos numerados");
			let parametros = {
				token: onebox.carrito,
				seatList: asientos
			};
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}
			if (filtros.ratio !== undefined) {
				parametros.idRate = filtros.ratio;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addSeats', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(203, "Informacion del carrito", respuesta);
			} else {
				return await onebox.generarEstado(-203, "No hay token", []);
			}
		},
		anadirMejoresAsientos: async function(sesion, unidades, filtros) {
			console.log("Funcion aÃ±adir mejores asientos");
			let parametros = {
				token: onebox.carrito,
				idSession: sesion,
				numSeats: unidades
			};
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}
			if (filtros.ratio !== undefined) {
				parametros.idRate = filtros.ratio;
			}
			if (filtros.vista !== undefined) {
				parametros.idView = filtros.vista;
			}
			if (filtros.zona !== undefined) {
				parametros.idPriceZone = filtros.zona;
			}
			if (filtros.sector !== undefined) {
				parametros.idSector = filtros.sector;
			}
			if (filtros.zonaNoNumerada !== undefined) {
				parametros.notNumberedZone = filtros.zonaNoNumerada;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addBestSeats', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(204, "Informacion del carrito", respuesta);
			} else {
				return await onebox.generarEstado(-204, "No hay token", []);
			}
		},
		obtenerPromociones: async function(codigo, filtros) {
			console.log("Obtener promociones");
			let parametros = {
				token: onebox.carrito
			};

			let respuesta = await onebox.llamadaAPI('GET', 'shoppingCart/availablePromotionsAndDiscounts', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(205, "Informacion de las promociones", respuesta);
			} else {
				return await onebox.generarEstado(-205, "No hay promociones", []);
			}


		},
		obtenerPromocionesGrupo: async function(codigo, filtros) {
			console.log("Obtener promociones de grupo");
			let parametros = {
				token: onebox.carrito,
				promotionalCode: codigo
			};
			if (filtros.grupo !== undefined) {
				parametros.idGroup = filtros.grupo;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/promotionalCodeGroup', parametros);
			if (respuesta["@idGroup"] !== undefined) {
				return await onebox.generarEstado(206, "Informacion de las promociones de grupo", respuesta);
			} else {
				return await onebox.generarEstado(-206, "No hay promociones", []);
			}
		},
		aplicarDescuento: async function(descuento, elementos, filtros) {
			console.log("Aplicar descuento");
			let parametros = {
				token: onebox.carrito,
				discount: descuento,
				items: elementos
			};
			if (filtros.forzar !== undefined) {
				parametros.forceLimits = filtros.forzar;
			}
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addDiscount', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(207, "Aplicar descuento", respuesta);
			} else {
				return await onebox.generarEstado(-207, "Error aplicando descuento", []);
			}
		},
		aplicarPromocion: async function(promocion, elementos, filtros) {
			console.log("Aplicar promocion");
			let parametros = {
				token: onebox.carrito,
				promotion: promocion,
				items: elementos
			};
			if (filtros.forzar !== undefined) {
				parametros.forceLimits = filtros.forzar;
			}
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addPromotion', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(208, "Aplicar promocion", respuesta);
			} else {
				return await onebox.generarEstado(-208, "Error aplicando promocion", []);
			}
		},
		eliminarDescuento: async function(descuento, elementos, filtros) {
			console.log("Eliminar descuento");
			let parametros = {
				token: onebox.carrito,
				discount: descuento,
				items: elementos
			};
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/releaseDiscount', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(209, "Eliminar descuento", respuesta);
			} else {
				return await onebox.generarEstado(-209, "Error eliminando descuento", []);
			}
		},
		eliminarPromocion: async function(promocion, elementos, filtros) {
			console.log("Eliminar promocion");
			let parametros = {
				token: onebox.carrito,
				promotion: promocion,
				items: elementos
			};
			if (filtros.total !== undefined) {
				parametros.totalCharges = filtros.total;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/releasePromotion', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(210, "Eliminar promocion", respuesta);
			} else {
				return await onebox.generarEstado(-210, "Error eliminando promocion", []);
			}
		},
		cambiarRatios: async function(elementos, filtros) {
			console.log("Cambiar ratio");
			let parametros = {
				token: onebox.carrito,
				items: elementos
			};
			if (filtros.ratio != 0) {
				parametros.idRate = filtros.ratio;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/rate', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(211, "Cambiar ratio", respuesta);
			} else {
				return await onebox.generarEstado(-211, "Error cambiando ratio", []);
			}
		},
		datosNominativos: async function(datos) {
			console.log("Cambiar datos nominativos");
			let parametros = {
				token: onebox.carrito,
				attendants: datos
			};

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/addAttendant', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(212, "Cambiar datos nominativos", respuesta);
			} else {
				return await onebox.generarEstado(-212, "Error cambiando datos nominativos", []);
			}
		},
		datosCliente: async function(email, datos) {
			console.log("Cambiar datos cliente");
			let parametros = {
				token: onebox.carrito,
				email: email
			};
			if (datos.nombre !== undefined) {
				parametros.firstName = datos.nombre;
			}
			if (datos.apellidos !== undefined) {
				parametros.lastName = datos.apellidos;
			}
			if (datos.fechaNacimiento !== undefined) {
				parametros.birthday = datos.fechaNacimiento;
			}
			if (datos.telefono !== undefined) {
				parametros.telephone = datos.telefono;
			}
			if (datos.nif !== undefined) {
				parametros.identification = datos.nif;
				parametros.identificationType = 1;
			}
			if (datos.sexo !== undefined) {
				parametros.gender = datos.sexo;
			}
			if (datos.direccion !== undefined) {
				parametros.address = datos.direccion;
			}
			if (datos.ciudad !== undefined) {
				parametros.city = datos.ciudad;
			}
			if (datos.codigoPostal !== undefined) {
				parametros.postalCode = datos.codigoPostal;
			}
			if (datos.pais !== undefined) {
				parametros.countryCode = datos.pais;
			}
			if (datos.comunidad !== undefined) {
				parametros.countrySubdivisionCode = datos.comunidad;
			}
			if (datos.aceptaPublicidad !== undefined) {
				parametros.allowCommercialMailing = datos.aceptaPublicidad;
			}
			if (datos.emailTicket !== undefined) {
				parametros.ticketEmail = datos.emailTicket;
			}
			if (datos.emailFactura !== undefined) {
				parametros.receiptEmail = datos.emailFactura;
			}
			if (datos.datosSeguro !== undefined) {
				parametros.additionalInsuranceData = datos.datosSeguro;
			}
			if (datos.nota !== undefined) {
				parametros.notes = datos.nota;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/clientData', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(213, "Cambiar datos cliente", respuesta);
			} else {
				return await onebox.generarEstado(-213, "Error cambiando datos cliente", []);
			}
		},
		entrega: async function(tipo, coste) {
			console.log("Cambiar datos entrega");
			let parametros = {
				token: onebox.carrito,
				orderDeliveryCost: coste,
				type: tipo
			};

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/delivery', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(214, "Cambiar datos entrega", respuesta);
			} else {
				return await onebox.generarEstado(-214, "Error cambiando datos entrega", []);
			}
		},
		liberar: async function() {
			console.log("Liberar carrito");
			let parametros = {
				token: onebox.carrito
			};

			let respuesta = await onebox.llamadaAPI('POST', 'shoppingCart/releaseAllItems', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(215, "Liberar carrito", respuesta);
			} else {
				return await onebox.generarEstado(-215, "Error liberando carrito", []);
			}
		},
	},
	pedido: {
		crearPrerreserva: async function(tipo, filtros) {
			console.log("Crear prereserva");
			let parametros = {
				token: onebox.carrito,
				orderType: tipo,
			};
			if (filtros.elementos !== undefined) {
				parametros.items = filtros.elementos;
			}
			if (filtros.cargos !== undefined) {
				parametros.itemsChannelCharges = filtros.cargos;
			}
			if (filtros.nota !== undefined) {
				parametros.notes = filtros.nota;
			}
			if (filtros.saltarValidacion !== undefined) {
				parametros.skipClientValidations = filtros.saltarValidacion;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'order/createOrder', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(301, "Crear prerreserva", respuesta);
			} else {
				return await onebox.generarEstado(-301, "Error creando prerreserva", []);
			}
		},
		cancelar: async function() {
			console.log("Cancelar prereserva");
			let parametros = {
				orderCode: onebox.prerreserva,
			};

			let respuesta = await onebox.llamadaAPI('POST', 'order/releaseToShoppingCart', parametros);
			if (respuesta["@token"] !== undefined) {
				return await onebox.generarEstado(302, "Eliminar prerreserva", respuesta);
			} else {
				return await onebox.generarEstado(-302, "Error eliminando prerreserva", []);
			}
		},
		confirmar: async function(pago, filtros) {
			console.log("Confirmar prereserva");
			let parametros = {
				orderCode: onebox.prerreserva,
				payments: pago
			};
			if (filtros.caducidad !== undefined) {
				parametros.bookingExpireDate = filtros.caducidad;
			}
			if (filtros.fraude !== undefined) {
				parametros.suspectFraud = filtros.fraude;
			}
			if (filtros.nota !== undefined) {
				parametros.notes = filtros.nota;
			}
			if (filtros.idPedido !== undefined) {
				parametros.externalCode = filtros.idPedido;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'order/commitOrder', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(303, "Confirmar prerreserva", respuesta);
			} else {
				return await onebox.generarEstado(-303, "Error confirmando prerreserva", []);
			}
		},
		buscar: async function(filtros) {
			console.log("Buscar prereserva");
			let parametros = {
				sellerChannel: onebox.API.ChannelID
			};
			if (filtros.desde !== undefined) {
				parametros.dateFrom = filtros.desde;
			}
			if (filtros.hasta !== undefined) {
				parametros.dateTo = filtros.hasta;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'order/simpleSearchOperations', parametros);
			if (respuesta["@order"] !== undefined) {
				return await onebox.generarEstado(304, "Listado de operaciones", respuesta);
			} else {
				return await onebox.generarEstado(-304, "Error buscando operaciones", []);
			}
		},
		verDetalles: async function(filtros) {
			console.log("Ver detalles prereserva");
			let parametros = {
				orderCode: onebox.prerreserva
			};
			if (filtros.barcode !== undefined) {
				parametros.barcode = filtros.barcode;
			}


			let respuesta = await onebox.llamadaAPI('GET', 'order/details', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(305, "Detalles de operacion", respuesta);
			} else {
				return await onebox.generarEstado(-305, "Error obteniendo detalles de operacion", []);
			}
		},
		devolucion: async function(elementos, pago, cargos, filtros) {
			console.log("Devolver prereserva");
			let parametros = {
				orderCode: onebox.prerreserva,
				items: elementos,
				payments: pago,
				includeCharges: cargos
			};
			if (filtros.incluirEnvio !== undefined) {
				parametros.includeDeliveryCosts = filtros.incluirEnvio;
			}
			if (filtros.incluirSeguro !== undefined) {
				parametros.includeInsurance = filtros.incluirSeguro;
			}
			if (filtros.incluirImpuestos !== undefined) {
				parametros.includeAllFees = filtros.incluirImpuestos;
			}
			if (filtros.listadoImpuestos !== undefined) {
				parametros.feesToInclude = filtros.listadoImpuestos;
			}
			if (filtros.nota !== undefined) {
				parametros.notes = filtros.nota;
			}
			if (filtros.idPedido !== undefined) {
				parametros.externalCode = filtros.idPedido;
			}


			let respuesta = await onebox.llamadaAPI('POST', 'order/refundItems', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(306, "Devolver operacion", respuesta);
			} else {
				return await onebox.generarEstado(-306, "Error devolviendo operacion", []);
			}
		},
		idPedido: async function(idPedido) {
			console.log("Asignar id pedido");
			let parametros = {
				orderCode: onebox.prerreserva,
				externalCode: idPedido
			};

			let respuesta = await onebox.llamadaAPI('POST', 'order/updateExternalCode', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(307, "Asignar id pedido", respuesta);
			} else {
				return await onebox.generarEstado(-307, "Error asignando id de pedido", []);
			}
		},
		confirmarAlquiler: async function(filtros) {
			console.log("Asignar id pedido");
			let parametros = {
				orderCode: onebox.prerreserva
			};
			if (filtros.nota !== undefined) {
				parametros.note = filtros.nota;
			}
			if (filtros.elementos !== undefined) {
				parametros.items = filtros.elementos;
			}
			if (filtros.saltarValidacion !== undefined) {
				parametros.skipClientValidations = filtros.saltarValidacion;
			}

			let respuesta = await onebox.llamadaAPI('POST', 'order/purcharseBooking', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(308, "Confirmar alquiler", respuesta);
			} else {
				return await onebox.generarEstado(-308, "Error confirmando alquiler", []);
			}
		}
	},
	tickets: {
		pdf: async function(filtros) {
			console.log("Obtener PDF tickets");
			let parametros = {
				orderCode: onebox.prerreserva
			};
			if (filtros.elementos !== undefined) {
				parametros.items = filtros.elementos;
			}
			if (filtros.incluirFactura !== undefined) {
				parametros.includeReceipt = filtros.incluirFactura;
			}
			if (filtros.agrupar !== undefined) {
				parametros.merged = filtros.agrupar;
			}

			let respuesta = await onebox.llamadaAPI('GET', 'order/ticketsPDF', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(401, "Tickets PDF", respuesta);
			} else {
				return await onebox.generarEstado(-401, "Error obteniendo tickets PDF", []);
			}
		},
		info: async function(filtros) {
			console.log("Obtener info tickets");
			let parametros = {
				orderCode: onebox.prerreserva
			};
			if (filtros.elementos !== undefined) {
				parametros.items = filtros.elementos;
			}
			if (filtros.incluirFactura !== undefined) {
				parametros.includeReceipt = filtros.incluirFactura;
			}
			if (filtros.agrupar !== undefined) {
				parametros.merged = filtros.agrupar;
			}

			let respuesta = await onebox.llamadaAPI('GET', 'order/ticketsInfo', parametros);
			if (respuesta["@orderCode"] !== undefined) {
				return await onebox.generarEstado(402, "Tickets info", respuesta);
			} else {
				return await onebox.generarEstado(-402, "Error obteniendo tickets info", []);
			}
		}
	}

}

module.exports = onebox;